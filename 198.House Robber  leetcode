//s.c = O(n)
//t.c=0(n)
//using recursion+dp

class Solution {
public:
    int robber(int index , vector<int>&nums,vector<int>&dp)
    {
        if(index==0)
        return nums[0];
        if(index==1)
        return max(nums[0],nums[1]);
       if(dp[index]!=-1)return dp[index];
        return dp[index]=max(nums[index]+robber(index-2,nums,dp),robber(index-1,nums,dp));
    }
    int rob(vector<int>& nums) {
        int n = nums.size();
        vector<int>dp(n,-1);
        return robber(n-1,nums,dp);
    }
};

//t.c=o(n)
//sc = o(1)  space optimization
class Solution {
public:
    int rob(vector<int>& nums) {
        int n = nums.size();
        if(n==1)
        return nums[0];
        if(n==2)
        return max(nums[0],nums[1]);
        int curr, prev=max(nums[0],nums[1]) , prev2=nums[0];
        for(int i =2;i<n;i++)
        {
            curr=max(nums[i]+prev2,prev);
            prev2=prev;
            prev=curr;
        }
      return curr;
    }
};
